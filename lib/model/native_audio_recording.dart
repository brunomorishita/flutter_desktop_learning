// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Native Audio Recording using SDL
class NativeAudioRecording {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeAudioRecording(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeAudioRecording.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void record_init(
    ffi.Pointer<ffi.Int8> wavFile,
  ) {
    return _record_init(
      wavFile,
    );
  }

  late final _record_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>(
          'record_init');
  late final _record_init =
      _record_initPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  void record_start() {
    return _record_start();
  }

  late final _record_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('record_start');
  late final _record_start = _record_startPtr.asFunction<void Function()>();

  void record_stop() {
    return _record_stop();
  }

  late final _record_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('record_stop');
  late final _record_stop = _record_stopPtr.asFunction<void Function()>();

  void play_init(
    ffi.Pointer<ffi.Int8> wavFile,
  ) {
    return _play_init(
      wavFile,
    );
  }

  late final _play_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>(
          'play_init');
  late final _play_init =
      _play_initPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  void play_start() {
    return _play_start();
  }

  late final _play_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('play_start');
  late final _play_start = _play_startPtr.asFunction<void Function()>();

  void play_stop() {
    return _play_stop();
  }

  late final _play_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('play_stop');
  late final _play_stop = _play_stopPtr.asFunction<void Function()>();
}
